Project Setup
Set up your project as described in the initial steps:

bash
Copy code
mkdir my-erc20-token
cd my-erc20-token
npm init -y
npm install --save-dev hardhat
npx hardhat
Install necessary dependencies:

bash
Copy code
npm install @openzeppelin/contracts ethers hardhat-deploy
ERC20 Smart Contract
Create a file contracts/MyToken.sol:

solidity
Copy code
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC20, Ownable {
    constructor() ERC20("MyToken", "MTK") {}

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}
HardHat Configuration
Update hardhat.config.js:

javascript
Copy code
require("@nomiclabs/hardhat-waffle");
require("@nomiclabs/hardhat-ethers");
require("hardhat-deploy");

module.exports = {
  solidity: "0.8.0",
  networks: {
    hardhat: {},
  },
  namedAccounts: {
    deployer: {
      default: 0,
    },
  },
};
Deployment Script
Create a file deploy/01_deploy_my_token.js:

javascript
Copy code
module.exports = async ({ getNamedAccounts, deployments }) => {
  const { deploy } = deployments;
  const { deployer } = await getNamedAccounts();

  await deploy("MyToken", {
    from: deployer,
    log: true,
  });
};

module.exports.tags = ["MyToken"];
Interaction Script
Create a file scripts/interact.js:

javascript
Copy code
const { ethers } = require("hardhat");

async function main() {
  const [deployer, user] = await ethers.getSigners();
  const MyToken = await ethers.getContract("MyToken", deployer);

  console.log("Minting tokens to user...");
  await MyToken.mint(user.address, ethers.utils.parseUnits("100", 18));
  console.log("User balance:", (await MyToken.balanceOf(user.address)).toString());

  console.log("Burning tokens from user...");
  await MyToken.connect(user).burn(ethers.utils.parseUnits("50", 18));
  console.log("User balance after burn:", (await MyToken.balanceOf(user.address)).toString());
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
Deployment and Interaction
Compile the contract:

bash
Copy code
npx hardhat compile
Deploy the contract:

bash
Copy code
npx hardhat deploy --network hardhat
Run the interaction script:

bash
Copy code
npx hardhat run scripts/interact.js --network hardhat
This streamlined code will create, deploy, and interact with an ERC20 token using HardHat and JavaScript.
